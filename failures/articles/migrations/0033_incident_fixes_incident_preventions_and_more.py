# Generated by Django 4.1.3 on 2024-02-07 17:18

from django.db import migrations, models
import django.db.models.deletion


class Migration(migrations.Migration):

    dependencies = [
        ("articles", "0032_merge_20240207_1718"),
    ]

    operations = [
        migrations.AddField(
            model_name="incident",
            name="fixes",
            field=models.TextField(blank=True, null=True, verbose_name="Fixes"),
        ),
        migrations.AddField(
            model_name="incident",
            name="preventions",
            field=models.TextField(blank=True, null=True, verbose_name="Preventions"),
        ),
        migrations.AddField(
            model_name="incident",
            name="recurring_option",
            field=models.TextField(
                blank=True, null=True, verbose_name="Recurring Option"
            ),
        ),
        migrations.AddField(
            model_name="incident",
            name="recurring_rationale",
            field=models.TextField(
                blank=True, null=True, verbose_name="Recurring Rationale"
            ),
        ),
        migrations.CreateModel(
            name="RiskRecord",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "url",
                    models.URLField(
                        help_text="URL of the article.",
                        max_length=510,
                        unique=True,
                        verbose_name="URL",
                    ),
                ),
                (
                    "published",
                    models.DateTimeField(
                        help_text="Date and time when the article was published.",
                        verbose_name="Published",
                    ),
                ),
                (
                    "source",
                    models.URLField(
                        help_text="URL of the source of the article, such as nytimes.com.",
                        verbose_name="Source",
                    ),
                ),
                (
                    "article_summary",
                    models.TextField(
                        blank=True,
                        help_text="Summary of the article generated by an OS summarizer model.",
                        verbose_name="article_summary",
                    ),
                ),
                (
                    "body",
                    models.TextField(
                        blank=True,
                        help_text="Body of the article scraped from the URL.",
                        verbose_name="Body",
                    ),
                ),
                (
                    "embedding",
                    models.FileField(
                        editable=False,
                        help_text="NumPy array of the embedding of the article stored as a file.",
                        null=True,
                        upload_to="embeddings",
                        verbose_name="Embedding",
                    ),
                ),
                (
                    "scraped_at",
                    models.DateTimeField(
                        auto_now_add=True,
                        help_text="Date and time when the article was scraped.",
                        verbose_name="Scraped at",
                    ),
                ),
                (
                    "scrape_successful",
                    models.BooleanField(
                        help_text="Whether the article was scraped successfully.",
                        null=True,
                        verbose_name="Scrape Successful",
                    ),
                ),
                (
                    "describes_failure",
                    models.BooleanField(
                        help_text="Whether the article describes a failure. This field is set by ChatGPT.",
                        null=True,
                        verbose_name="Describes Failure",
                    ),
                ),
                (
                    "analyzable_failure",
                    models.BooleanField(
                        help_text="Whether the article can be used to conduct a failure analysis. This field is set by ChatGPT.",
                        null=True,
                        verbose_name="Analyzable Failure",
                    ),
                ),
                (
                    "article_stored",
                    models.BooleanField(
                        help_text="Whether the article has been stored into the vector database.",
                        null=True,
                        verbose_name="Article Stored",
                    ),
                ),
                (
                    "similarity_score",
                    models.FloatField(
                        blank=True, null=True, verbose_name="Cosine similarity score"
                    ),
                ),
                (
                    "headline",
                    models.TextField(blank=True, null=True, verbose_name="Headline"),
                ),
                (
                    "incident",
                    models.ForeignKey(
                        blank=True,
                        null=True,
                        on_delete=django.db.models.deletion.SET_NULL,
                        related_name="risks_records",
                        to="articles.incident",
                    ),
                ),
            ],
        ),
    ]
